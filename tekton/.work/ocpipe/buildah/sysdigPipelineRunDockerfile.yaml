apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"tekton.dev/v1beta1","kind":"Pipeline","metadata":{"annotations":{},"labels":{"app.kubernetes.io/instance":"hellopython","pipeline.openshift.io/runtime":"python","pipeline.openshift.io/type":"kubernetes"},"name":"hellopython","namespace":"mytest"},"spec":{"params":[{"default":"hellopython","name":"APP_NAME","type":"string"},{"default":"https://github.com/rrs8/hellopython.git","name":"GIT_REPO","type":"string"},{"default":"master","name":"GIT_REVISION","type":"string"},{"default":"image-registry.openshift-image-registry.svc:5000/hello/hellopython","name":"IMAGE_NAME","type":"string"},{"default":".","name":"PATH_CONTEXT","type":"string"},{"default":"3.8-ubi8","name":"VERSION","type":"string"}],"tasks":[{"name":"fetch-repository","params":[{"name":"url","value":"$(params.GIT_REPO)"},{"name":"revision","value":"$(params.GIT_REVISION)"},{"name":"deleteExisting","value":"true"}],"taskRef":{"kind":"ClusterTask","name":"git-clone"},"workspaces":[{"name":"output","workspace":"workspace"}]},{"name":"build","params":[{"name":"IMAGE","value":"$(params.IMAGE_NAME)"},{"name":"TLSVERIFY","value":"false"},{"name":"PATH_CONTEXT","value":"$(params.PATH_CONTEXT)"},{"name":"VERSION","value":"$(params.VERSION)"}],"runAfter":["fetch-repository"],"taskRef":{"kind":"ClusterTask","name":"s2i-python"},"workspaces":[{"name":"source","workspace":"workspace"}]},{"name":"sysdigscan","params":[{"name":"IMAGE","value":"$(params.IMAGE_NAME)"}],"runAfter":["build"],"taskRef":{"kind":"Task","name":"sysdigscan"}}],"workspaces":[{"name":"workspace"}]}}
    pipeline.openshift.io/started-by: kube:admin
  creationTimestamp: "2022-01-06T03:27:51Z"
  generation: 1
  labels:
    app.kubernetes.io/instance: hellopython
    pipeline.openshift.io/runtime: python
    pipeline.openshift.io/type: kubernetes
    tekton.dev/pipeline: hellopython
  managedFields:
  - apiVersion: tekton.dev/v1beta1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:pipeline.openshift.io/started-by: {}
        f:labels:
          .: {}
          f:app.kubernetes.io/instance: {}
          f:pipeline.openshift.io/runtime: {}
          f:pipeline.openshift.io/type: {}
          f:tekton.dev/pipeline: {}
      f:spec:
        .: {}
        f:params: {}
        f:pipelineRef:
          .: {}
          f:name: {}
        f:serviceAccountName: {}
        f:status: {}
        f:timeout: {}
        f:workspaces: {}
    manager: Mozilla
    operation: Update
    time: "2022-01-06T03:27:51Z"
  - apiVersion: tekton.dev/v1beta1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          f:kubectl.kubernetes.io/last-applied-configuration: {}
      f:status:
        .: {}
        f:completionTime: {}
        f:conditions: {}
        f:pipelineSpec:
          .: {}
          f:params: {}
          f:tasks: {}
          f:workspaces: {}
        f:startTime: {}
        f:taskRuns:
          .: {}
          f:hellopython-v7kwda-buildah-87n2b:
            .: {}
            f:pipelineTaskName: {}
            f:status:
              .: {}
              f:completionTime: {}
              f:conditions: {}
              f:podName: {}
              f:startTime: {}
              f:steps: {}
              f:taskResults: {}
              f:taskSpec:
                .: {}
                f:description: {}
                f:params: {}
                f:results: {}
                f:steps: {}
                f:volumes: {}
                f:workspaces: {}
          f:hellopython-v7kwda-fetch-repository-8s45z:
            .: {}
            f:pipelineTaskName: {}
            f:status:
              .: {}
              f:completionTime: {}
              f:conditions: {}
              f:podName: {}
              f:startTime: {}
              f:steps: {}
              f:taskResults: {}
              f:taskSpec:
                .: {}
                f:description: {}
                f:params: {}
                f:results: {}
                f:steps: {}
                f:workspaces: {}
          f:hellopython-v7kwda-sysdigscan-rlh2c:
            .: {}
            f:pipelineTaskName: {}
            f:status:
              .: {}
              f:completionTime: {}
              f:conditions: {}
              f:podName: {}
              f:startTime: {}
              f:steps: {}
              f:taskSpec:
                .: {}
                f:params: {}
                f:steps: {}
    manager: openshift-pipelines-controller
    operation: Update
    time: "2022-01-06T03:29:50Z"
  name: hellopython-v7kwda
  namespace: mytest
  resourceVersion: "3195410"
  selfLink: /apis/tekton.dev/v1beta1/namespaces/mytest/pipelineruns/hellopython-v7kwda
  uid: 29271f37-b371-4107-ac39-5649d365e0a5
spec:
  params:
  - name: APP_NAME
    value: hellopython
  - name: GIT_REPO
    value: https://github.com/rrs8/hellopython.git
  - name: GIT_REVISION
    value: main
  - name: IMAGE_NAME
    value: image-registry.openshift-image-registry.svc:5000/mytest/hellopython
  - name: PATH_CONTEXT
    value: .
  - name: VERSION
    value: 3.8-ubi8
  pipelineRef:
    name: hellopython
  serviceAccountName: pipeline
  timeout: 1h0m0s
  workspaces:
  - name: workspace
    persistentVolumeClaim:
      claimName: pvc-3206561552
status:
  completionTime: "2022-01-06T03:29:50Z"
  conditions:
  - lastTransitionTime: "2022-01-06T03:29:50Z"
    message: 'Tasks Completed: 3 (Failed: 0, Cancelled 0), Skipped: 0'
    reason: Succeeded
    status: "True"
    type: Succeeded
  pipelineSpec:
    params:
    - default: hellopython
      name: APP_NAME
      type: string
    - default: https://github.com/rrs8/hellopython.git
      name: GIT_REPO
      type: string
    - default: main
      name: GIT_REVISION
      type: string
    - default: image-registry.openshift-image-registry.svc:5000/mytest/hellopython
      name: IMAGE_NAME
      type: string
    - default: .
      name: PATH_CONTEXT
      type: string
    - default: 3.8-ubi8
      name: VERSION
      type: string
    tasks:
    - name: fetch-repository
      params:
      - name: url
        value: $(params.GIT_REPO)
      - name: revision
        value: $(params.GIT_REVISION)
      - name: deleteExisting
        value: "true"
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
      - name: output
        workspace: workspace
    - name: sysdigscan
      params:
      - name: IMAGE
        value: $(params.IMAGE_NAME)
      runAfter:
      - buildah
      taskRef:
        kind: Task
        name: sysdigscan
    - name: buildah
      params:
      - name: IMAGE
        value: $(params.IMAGE_NAME)
      - name: BUILDER_IMAGE
        value: registry.redhat.io/rhel8/buildah@sha256:6a68ece207bc5fd8db2dd5cc2d0b53136236fb5178eb5b71eebe5d07a3c33d13
      - name: STORAGE_DRIVER
        value: vfs
      - name: DOCKERFILE
        value: ./Dockerfile
      - name: CONTEXT
        value: .
      - name: TLSVERIFY
        value: "false"
      - name: FORMAT
        value: oci
      runAfter:
      - fetch-repository
      taskRef:
        kind: ClusterTask
        name: buildah
      workspaces:
      - name: source
        workspace: workspace
    workspaces:
    - name: workspace
  startTime: "2022-01-06T03:27:51Z"
  taskRuns:
    hellopython-v7kwda-buildah-87n2b:
      pipelineTaskName: buildah
      status:
        completionTime: "2022-01-06T03:29:01Z"
        conditions:
        - lastTransitionTime: "2022-01-06T03:29:01Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: hellopython-v7kwda-buildah-87n2b-pod-5l5sm
        startTime: "2022-01-06T03:28:16Z"
        steps:
        - container: step-build
          imageID: registry.redhat.io/rhel8/buildah@sha256:6a68ece207bc5fd8db2dd5cc2d0b53136236fb5178eb5b71eebe5d07a3c33d13
          name: build
          terminated:
            containerID: cri-o://7f072aea3248674f124144e73ca6f980ea3194b9d06f44cefbd5de7677eee05d
            exitCode: 0
            finishedAt: "2022-01-06T03:28:53Z"
            reason: Completed
            startedAt: "2022-01-06T03:28:31Z"
        - container: step-push
          imageID: registry.redhat.io/rhel8/buildah@sha256:6a68ece207bc5fd8db2dd5cc2d0b53136236fb5178eb5b71eebe5d07a3c33d13
          name: push
          terminated:
            containerID: cri-o://cd4e054182de208886525ad0f0b6d59cdeebc43af3d4d35977d98de75f3f300a
            exitCode: 0
            finishedAt: "2022-01-06T03:28:59Z"
            reason: Completed
            startedAt: "2022-01-06T03:28:53Z"
        - container: step-digest-to-results
          imageID: registry.redhat.io/rhel8/buildah@sha256:6a68ece207bc5fd8db2dd5cc2d0b53136236fb5178eb5b71eebe5d07a3c33d13
          name: digest-to-results
          terminated:
            containerID: cri-o://367e99073f3c82dd770a8ee160e0354db85c1230a51c581d5b06ed77adaf8d90
            exitCode: 0
            finishedAt: "2022-01-06T03:29:00Z"
            message: '[{"key":"IMAGE_DIGEST","value":"sha256:ef83e04190c14e911e835200a34f1aac77626054a9f324adbb9d2ea0ac81848f","type":"TaskRunResult"}]'
            reason: Completed
            startedAt: "2022-01-06T03:29:00Z"
        taskResults:
        - name: IMAGE_DIGEST
          value: sha256:ef83e04190c14e911e835200a34f1aac77626054a9f324adbb9d2ea0ac81848f
        taskSpec:
          description: |-
            Buildah task builds source into a container image and then pushes it to a container registry.
            Buildah Task builds source into a container image using Project Atomic's Buildah build tool.It uses Buildah's support for building from Dockerfiles, using its buildah bud command.This command executes the directives in the Dockerfile to assemble a container image, then pushes that image to a container registry.
          params:
          - description: Reference of the image buildah will produce.
            name: IMAGE
            type: string
          - default: registry.redhat.io/rhel8/buildah@sha256:6a68ece207bc5fd8db2dd5cc2d0b53136236fb5178eb5b71eebe5d07a3c33d13
            description: The location of the buildah builder image.
            name: BUILDER_IMAGE
            type: string
          - default: vfs
            description: Set buildah storage driver
            name: STORAGE_DRIVER
            type: string
          - default: ./Dockerfile
            description: Path to the Dockerfile to build.
            name: DOCKERFILE
            type: string
          - default: .
            description: Path to the directory to use as context.
            name: CONTEXT
            type: string
          - default: "true"
            description: Verify the TLS on the registry endpoint (for push/pull to
              a non-TLS registry)
            name: TLSVERIFY
            type: string
          - default: oci
            description: The format of the built container, oci or docker
            name: FORMAT
            type: string
          - default: ""
            description: Extra parameters passed for the build command when building
              images.
            name: BUILD_EXTRA_ARGS
            type: string
          - default: ""
            description: Extra parameters passed for the push command when pushing
              images.
            name: PUSH_EXTRA_ARGS
            type: string
          results:
          - description: Digest of the image just built.
            name: IMAGE_DIGEST
          steps:
          - image: $(params.BUILDER_IMAGE)
            name: build
            resources: {}
            script: |
              buildah --storage-driver=$(params.STORAGE_DRIVER) bud \
                $(params.BUILD_EXTRA_ARGS) --format=$(params.FORMAT) \
                --tls-verify=$(params.TLSVERIFY) --no-cache \
                -f $(params.DOCKERFILE) -t $(params.IMAGE) $(params.CONTEXT)
            volumeMounts:
            - mountPath: /var/lib/containers
              name: varlibcontainers
            workingDir: $(workspaces.source.path)
          - image: $(params.BUILDER_IMAGE)
            name: push
            resources: {}
            script: |
              buildah --storage-driver=$(params.STORAGE_DRIVER) push \
                $(params.PUSH_EXTRA_ARGS) --tls-verify=$(params.TLSVERIFY) \
                --digestfile $(workspaces.source.path)/image-digest $(params.IMAGE) \
                docker://$(params.IMAGE)
            volumeMounts:
            - mountPath: /var/lib/containers
              name: varlibcontainers
            workingDir: $(workspaces.source.path)
          - image: $(params.BUILDER_IMAGE)
            name: digest-to-results
            resources: {}
            script: cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST
          volumes:
          - emptyDir: {}
            name: varlibcontainers
          workspaces:
          - name: source
    hellopython-v7kwda-fetch-repository-8s45z:
      pipelineTaskName: fetch-repository
      status:
        completionTime: "2022-01-06T03:28:16Z"
        conditions:
        - lastTransitionTime: "2022-01-06T03:28:16Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: hellopython-v7kwda-fetch-repository-8s45z-pod-c9zg2
        startTime: "2022-01-06T03:27:51Z"
        steps:
        - container: step-clone
          imageID: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:73a433de8fa290807559ba341696b3b192949d3d8690259de4a465551c8ef627
          name: clone
          terminated:
            containerID: cri-o://f01a28a06fe541c1afacb115ddf998889a2d9fd3f34c5fcdb5f5990c757d3d09
            exitCode: 0
            finishedAt: "2022-01-06T03:28:15Z"
            message: '[{"key":"commit","value":"ebdd1e471d15498cef01d40f1ea8ae47169bc4d1","type":"TaskRunResult"},{"key":"url","value":"https://github.com/rrs8/hellopython.git","type":"TaskRunResult"}]'
            reason: Completed
            startedAt: "2022-01-06T03:28:14Z"
        taskResults:
        - name: commit
          value: ebdd1e471d15498cef01d40f1ea8ae47169bc4d1
        - name: url
          value: https://github.com/rrs8/hellopython.git
        taskSpec:
          description: |-
            These Tasks are Git tasks to work with repositories used by other tasks in your Pipeline.
            The git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace. You can clone into a subdirectory by setting this Task's subdirectory param. This Task also supports sparse checkouts. To perform a sparse checkout, pass a list of comma separated directory patterns to this Task's sparseCheckoutDirectories param.
          params:
          - description: git url to clone
            name: url
            type: string
          - default: ""
            description: git revision to checkout (branch, tag, sha, ref…)
            name: revision
            type: string
          - default: ""
            description: (optional) git refspec to fetch before checking out revision
            name: refspec
            type: string
          - default: "true"
            description: defines if the resource should initialize and fetch the submodules
            name: submodules
            type: string
          - default: "1"
            description: performs a shallow clone where only the most recent commit(s)
              will be fetched
            name: depth
            type: string
          - default: "true"
            description: defines if http.sslVerify should be set to true or false
              in the global git config
            name: sslVerify
            type: string
          - default: ""
            description: subdirectory inside the "output" workspace to clone the git
              repo into
            name: subdirectory
            type: string
          - default: ""
            description: defines which directories patterns to match or exclude when
              performing a sparse checkout
            name: sparseCheckoutDirectories
            type: string
          - default: "true"
            description: clean out the contents of the repo's destination directory
              (if it already exists) before trying to clone the repo there
            name: deleteExisting
            type: string
          - default: ""
            description: git HTTP proxy server for non-SSL requests
            name: httpProxy
            type: string
          - default: ""
            description: git HTTPS proxy server for SSL requests
            name: httpsProxy
            type: string
          - default: ""
            description: git no proxy - opt out of proxying HTTP/HTTPS requests
            name: noProxy
            type: string
          - default: "true"
            description: log the commands used during execution
            name: verbose
            type: string
          - default: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:afc5d3f9efe26c7042635d43b8ffd09d67936e3d0b6b901dc08a33e20313d361
            description: the image used where the git-init binary is
            name: gitInitImage
            type: string
          results:
          - description: The precise commit SHA that was fetched by this Task
            name: commit
          - description: The precise URL that was fetched by this Task
            name: url
          steps:
          - image: $(params.gitInitImage)
            name: clone
            resources: {}
            script: |
              #!/bin/sh
              set -eu -o pipefail

              if [[ "$(params.verbose)" == "true" ]] ; then
                set -x
              fi

              CHECKOUT_DIR="$(workspaces.output.path)/$(params.subdirectory)"

              cleandir() {
                # Delete any existing contents of the repo directory if it exists.
                #
                # We don't just "rm -rf $CHECKOUT_DIR" because $CHECKOUT_DIR might be "/"
                # or the root of a mounted volume.
                if [[ -d "$CHECKOUT_DIR" ]] ; then
                  # Delete non-hidden files and directories
                  rm -rf "$CHECKOUT_DIR"/*
                  # Delete files and directories starting with . but excluding ..
                  rm -rf "$CHECKOUT_DIR"/.[!.]*
                  # Delete files and directories starting with .. plus any other character
                  rm -rf "$CHECKOUT_DIR"/..?*
                fi
              }

              if [[ "$(params.deleteExisting)" == "true" ]] ; then
                cleandir
              fi

              test -z "$(params.httpProxy)" || export HTTP_PROXY=$(params.httpProxy)
              test -z "$(params.httpsProxy)" || export HTTPS_PROXY=$(params.httpsProxy)
              test -z "$(params.noProxy)" || export NO_PROXY=$(params.noProxy)

              /ko-app/git-init \
                -url "$(params.url)" \
                -revision "$(params.revision)" \
                -refspec "$(params.refspec)" \
                -path "$CHECKOUT_DIR" \
                -sslVerify="$(params.sslVerify)" \
                -submodules="$(params.submodules)" \
                -depth "$(params.depth)" \
                -sparseCheckoutDirectories "$(params.sparseCheckoutDirectories)"
              cd "$CHECKOUT_DIR"
              RESULT_SHA="$(git rev-parse HEAD)"
              EXIT_CODE="$?"
              if [ "$EXIT_CODE" != 0 ] ; then
                exit $EXIT_CODE
              fi
              # ensure we don't add a trailing newline to the result
              echo -n "$RESULT_SHA" > $(results.commit.path)
              echo -n "$(params.url)" > $(results.url.path)
          workspaces:
          - description: The git repo will be cloned onto the volume backing this
              workspace
            name: output
    hellopython-v7kwda-sysdigscan-rlh2c:
      pipelineTaskName: sysdigscan
      status:
        completionTime: "2022-01-06T03:29:50Z"
        conditions:
        - lastTransitionTime: "2022-01-06T03:29:50Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: hellopython-v7kwda-sysdigscan-rlh2c-pod-5knrp
        startTime: "2022-01-06T03:29:01Z"
        steps:
        - container: step-scan
          imageID: quay.io/sysdig/secure-inline-scan@sha256:c3cbdee12728cca7e40b0ce65aecbd5b237a0441fa0e789a942e31ca59f3bb16
          name: scan
          terminated:
            containerID: cri-o://7accf381293fce33b3015f25eb65d631233e8ec9340a83534ceb9f18ccd36fa7
            exitCode: 0
            finishedAt: "2022-01-06T03:29:50Z"
            reason: Completed
            startedAt: "2022-01-06T03:29:07Z"
        taskSpec:
          params:
          - description: image to scan
            name: IMAGE
            type: string
          steps:
          - args:
            - --registry-skip-tls
            - --registry-auth-file
            - /tekton/creds/.docker/config.json
            - -s
            - https://us2.app.sysdig.com
            - $(params.IMAGE)
            env:
            - name: SYSDIG_API_TOKEN
              valueFrom:
                secretKeyRef:
                  key: sysdig-secure-api-token
                  name: sysdig-secrets
            - name: http_proxy
              value: http://35.175.244.217:3128
            - name: https_proxy
              value: http://35.175.244.217:3128
            - name: no_proxy
              value: image-registry.openshift-image-registry.svc
            image: quay.io/sysdig/secure-inline-scan:2
            name: scan
            resources: {}
